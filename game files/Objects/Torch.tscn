[gd_scene load_steps=28 format=2]

[ext_resource path="res://Models/Torch.obj" type="ArrayMesh" id=1]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-Metallic.png" type="Texture" id=4]
[ext_resource path="res://Materials/Textures/wood.png" type="Texture" id=7]
[ext_resource path="res://Audio/fire.wav" type="AudioStream" id=9]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-Height.png" type="Texture" id=10]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-albedo.png" type="Texture" id=11]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-ao.png" type="Texture" id=12]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-Normal-ogl.png" type="Texture" id=13]
[ext_resource path="res://Materials/Textures/Rocky Ground/damp-rocky-ground1-Roughness.png" type="Texture" id=14]

[sub_resource type="SpatialMaterial" id=3]
albedo_texture = ExtResource( 7 )
uv1_scale = Vector3( 0.2, 0.2, 0.2 )
uv1_triplanar = true

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode unshaded;
uniform sampler2D signAlbedo;

uniform sampler2D noiseTexture;
uniform sampler2D noiseTexture2;

uniform vec4 colour : hint_color;

uniform float scrollSpeed;
uniform float scrollSpeed2;

void fragment() {
	vec4 test = texture(noiseTexture,vec2(UV.x+cos(TIME*scrollSpeed),UV.y+sin(TIME*scrollSpeed)));
	vec4 test2 = texture(noiseTexture2,vec2(UV.x+cos(-TIME*scrollSpeed2),UV.y+sin(-TIME*scrollSpeed2)));
	vec4 albedo = texture(signAlbedo,UV);
	if (albedo.a == 0.0) {
		ALPHA = 0.0;
	} else {
		test = round(test);
		albedo = test * test2 * colour;
		vec3 color = vec3((albedo.r),(albedo.g),(albedo.b));
		color = color*0.5;
		ALBEDO = color;
		EMISSION = vec3(colour.r/255.0,colour.g/255.0,colour.b/255.0);
	}
}"

[sub_resource type="OpenSimplexNoise" id=15]
period = 47.3
persistence = 1.0
lacunarity = 3.99

[sub_resource type="NoiseTexture" id=16]
noise = SubResource( 15 )

[sub_resource type="OpenSimplexNoise" id=17]
period = 177.6

[sub_resource type="NoiseTexture" id=18]
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/colour = Color( 1, 0.494118, 0, 1 )
shader_param/scrollSpeed = 0.1
shader_param/scrollSpeed2 = 0.2
shader_param/noiseTexture = SubResource( 16 )
shader_param/noiseTexture2 = SubResource( 18 )

[sub_resource type="SpatialMaterial" id=14]
flags_world_triplanar = true
albedo_texture = ExtResource( 11 )
metallic_texture = ExtResource( 4 )
roughness_texture = ExtResource( 14 )
normal_enabled = true
normal_scale = 1.0
normal_texture = ExtResource( 13 )
ao_enabled = true
ao_light_affect = 0.0
ao_texture = ExtResource( 12 )
ao_on_uv2 = false
ao_texture_channel = 0
depth_enabled = true
depth_scale = 0.05
depth_deep_parallax = false
depth_flip_tangent = false
depth_flip_binormal = false
depth_texture = ExtResource( 10 )

[sub_resource type="SphereMesh" id=25]
radius = 0.4
height = 1.0

[sub_resource type="Shader" id=23]
code = "/*
	炎シェーダー by あるる（きのもと 結衣）
	Fire Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type spatial;
render_mode depth_draw_opaque, unshaded, shadows_disabled;


uniform sampler2D noise_tex : hint_white;
uniform vec4 root_color : hint_color = vec4( 1.0, 0.75, 0.3, 1.0 );
uniform vec4 tip_color : hint_color = vec4( 1.0, 0.03, 0.001, 1.0 );

uniform float fire_alpha : hint_range( 0.0, 1.0 ) = 1.0;
uniform vec2 fire_speed = vec2( 0.0, 1.0 );
uniform float fire_aperture : hint_range( 0.0, 3.0 ) = 0.22;

/*
	noise_texを使わないパターン

float random( vec2 pos )
{ 
	return fract(sin(dot(pos, vec2(12.9898,78.233))) * 43758.5453);
}

float value_noise( vec2 pos )
{
	vec2 p = floor( pos );
	vec2 f = fract( pos );

	float v00 = random( p + vec2( 0.0, 0.0 ) );
	float v10 = random( p + vec2( 1.0, 0.0 ) );
	float v01 = random( p + vec2( 0.0, 1.0 ) );
	float v11 = random( p + vec2( 1.0, 1.0 ) );

	vec2 u = f * f * ( 3.0 - 2.0 * f );

	return mix( mix( v00, v10, u.x ), mix( v01, v11, u.x ), u.y );
}

float procedural_noise_tex( vec2 shifted_uv )
{
	return (
		value_noise( shifted_uv * 0.984864 ) * 20.0
	+	value_noise( shifted_uv * 2.543 ) * 10.0
	+	value_noise( shifted_uv * 9.543543 ) * 8.0
	+	value_noise( shifted_uv * 21.65436 ) * 5.0
	+	value_noise( shifted_uv * 42.0 ) * 2.0
	+	value_noise( shifted_uv * 87.135148 ) * 2.0
	+	value_noise( shifted_uv * 340.66534654 )
	) / 48.0;
}
*/

void fragment( )
{
	vec2 shifted_uv = UV + TIME * fire_speed;
	float fire_noise = texture( noise_tex, shifted_uv ).r;
	float noise = UV.y * ( ( ( UV.y + fire_aperture ) * fire_noise - fire_aperture ) * 75.0 );
	vec4 fire_color = mix( tip_color, root_color, noise * 0.05 );

	ALPHA = clamp( noise, 0.0, 1.0 ) * fire_alpha;
	ALBEDO = fire_color.rgb;
}
"

[sub_resource type="OpenSimplexNoise" id=26]

[sub_resource type="NoiseTexture" id=27]
seamless = true
noise = SubResource( 26 )

[sub_resource type="ShaderMaterial" id=24]
render_priority = 1
shader = SubResource( 23 )
shader_param/root_color = Color( 1, 0.996078, 0, 1 )
shader_param/tip_color = Color( 1, 0, 0, 1 )
shader_param/fire_alpha = 0.795
shader_param/fire_speed = Vector2( 0.1, 0.5 )
shader_param/fire_aperture = 0.37
shader_param/noise_tex = SubResource( 27 )

[sub_resource type="Curve" id=31]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 0.247031, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.745843, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=32]
curve = SubResource( 31 )

[sub_resource type="ParticlesMaterial" id=28]
gravity = Vector3( 0, 1, 0 )
initial_velocity = 0.5
initial_velocity_random = 1.0
scale_curve = SubResource( 32 )

[sub_resource type="SpatialMaterial" id=30]
flags_transparent = true
albedo_color = Color( 0.486275, 0.486275, 0.486275, 0.301961 )

[sub_resource type="SphereMesh" id=29]
material = SubResource( 30 )
radius = 0.1
height = 0.2

[node name="Torch" type="Spatial"]

[node name="Torch" type="MeshInstance" parent="."]
mesh = ExtResource( 1 )
material/0 = SubResource( 3 )
material/1 = SubResource( 5 )
material/2 = SubResource( 14 )

[node name="flame" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.984808, -0.173648, 0, 0.173648, 0.984808, 0, 2.5, 1 )
mesh = SubResource( 25 )
material/0 = SubResource( 24 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.2, 1 )
light_color = Color( 1, 0.564706, 0.25098, 1 )
omni_range = 8.0
omni_shadow_mode = 0
omni_shadow_detail = 0

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.2, 1 )
stream = ExtResource( 9 )
unit_db = 2.0
unit_size = 3.0
max_db = -16.538
pitch_scale = 0.5
autoplay = true
max_distance = 50.0

[node name="Particles" type="Particles" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.2, 1 )
amount = 16
lifetime = 2.0
preprocess = 5.0
local_coords = false
process_material = SubResource( 28 )
draw_pass_1 = SubResource( 29 )
